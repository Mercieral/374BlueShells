<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1304</x>
      <y>1056</y>
      <w>256</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
IMethod
--
--
+ getName() String
+ setName(String name) void
+ getAccessLevel() String
+ setAccessLevel(String access) void
+ getDesc() String
+ setDesc(String desc) void
+ getExceptions() String[]
+ setExceptions(String[] exceptions) void
+ getReturnType() String
+ setReturnType(String type) void
+ addArgument(String arg) void
+ getArguments() List&lt;String&gt;
+ toString() String
+ getInnerCalls(): List&lt;MethodContainer&gt;
+ addInnerCall(MethodContainer innerCall): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1672</x>
      <y>176</y>
      <w>200</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
IField
--
--
+ getName() String
+ setName(String name) void
+ getDesc() String
+ setDesc(String desc) void
+ getSignature() String
+ setSignature(String sign) void
+ getValue() Object
+ setValue(Object value) void
+ getAccessLevel() String
+ setAccessLevel(String access) void
+ toString() String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1432</x>
      <y>200</y>
      <w>200</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
IModel
--
+ addClass(IClass currentClass): void
+ getClasses(): List&lt;IClass&gt;
+ getRelations(): List&lt;IRelation&gt;
+ addRelation(IRelation relation): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1368</x>
      <y>0</y>
      <w>424</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>DesignParser
--
--
+ main(String[] args) void
+ parser(String args[]) void
- commandConsole(IModel model, HashMap&lt;String, IInvoker&gt; stream): void
- SDLogic(String line, Scanner scanner, IInvoker stream): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1208</y>
      <w>520</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ClassDeclarationVisitor
--
- IClass: currentClass
- String[]: currectClass
--
+ visit(int version, int access, String name, String signature, String superName, String[] interfaces): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>56</x>
      <y>1120</y>
      <w>464</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ClassFieldVisitor
--
- IClass: currentClass
--
+ visitField(int access, String name, String desc, String signature, Object value): FieldVisitor 
addAccessLevel(int access, IField currentField): void </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>784</y>
      <w>520</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>ClassVisitor
--
# api: int
# cv: ClassVisitor
--
+ visit(int version, int access, String name, String signature, String superName, String[] interfaces): void
+ visitSource(String source, String debug): void
+ visitOuterClass(String owner, String name, String desc): void
+ visitAnnotation(String desc, boolean visible): AnnotationVisitor
+ visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible): AnnotationVisitor
+ visitAttribute(Attribute attr): void
+ visitInnerClass(String name, String outerName, String innerName, int access): void
+ visitField(int access, String name, String desc, String signature, Object value): FieldVisitor
+ visitMethod(int access, String name, String desc, String signature, String[] exceptions): MethodVisitor
+ visitEnd(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1432</x>
      <y>336</y>
      <w>200</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>Model
--
- List&lt;IClass&gt; classes
- List&lt;IRelation&gt; relations 
--
+ addClass(IClass currentClass): void
+ getClasses(): List&lt;IClass&gt;
+ accept(IVisitor v): void
+ addRelation(IRelation relation): void
+ getRelations(): List&lt;IRelation&gt; 
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1304</x>
      <y>672</y>
      <w>256</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>Method
--
- String name
- String accessLevel
- String desc
- String[] exceptions
- String returnType
- List&lt;String&gt; arguments
- List&lt;MethodContainer&gt; innerCalls
--
+ getName() String
+ setName(String name) void
+ getAccessLevel() String
+ setAccessLevel(String access) void
+ getDesc() String
+ setDesc(String desc) void
+ getExceptions() String[]
+ setExceptions(String[] exceptions) void
+ getReturnType() String
+ setReturnType(String type) void
+ addArgument(String arg) void
+ getArguments() List&lt;String&gt;
+ getInnerCalls(): List&lt;MethodContainer&gt;
+ addInnerCall(MethodContainer innerCall): void
+ accept(IVisitor v): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1672</x>
      <y>432</y>
      <w>200</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Field
--
- String name
- String desc
- String signature
- Object value
- String accessLevel
--
+ getName() String
+ setName(String name) void
+ getDesc() String
+ setDesc(String desc) void
+ getSignature() String
+ setSignature(String sign) void
+ getValue() Object
+ setValue(Object value) void
+ getAccessLevel() String
+ setAccessLevel(String access) void
+ accept(IVisitor v): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1952</x>
      <y>1144</y>
      <w>216</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
IClass
--
--
+getIMethods(): Collection&lt;IMethod&gt;
+getIField(): Collection&lt;IField&gt;
+getAcessLevel(): int
+getSignature(): String
+getClassName(): String
+getClassVersion(): double
+getSuperName(): IClass
+getInterface(): Collection&lt;String&gt;
+getExtension(): String
+addIMethod(IMethod method): void
+addIField(IField field): void
+setAccessLevel(int access): void
+setSignature(String signature): void
+setClassName(String name): void
+setClassVersion(double version): void
+setSuperName(IClass name): void
+addInterface(String inter): void
+setExtension(String extension): void
+toString(): String
+ addPattern(IPattern pattern): void
+ getPatterns(): List&lt;IPattern&gt; </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1952</x>
      <y>632</y>
      <w>216</w>
      <h>456</h>
    </coordinates>
    <panel_attributes>ConcreteClass
--
- Collection&lt;IMethod&gt; methodList
- Collection&lt;IField&gt; fieldList
- int accessLevel
- String signature
- String name
- double version
- IClass superClass
- Collection&lt;String&gt; interfaceList
- String extension
- List&lt;IPattern&gt; patternList
--
+ getIMethods(): Collection&lt;IMethod&gt;
+ getIField(): Collection&lt;IField&gt;
+ getAcessLevel(): int
+ getSignature(): String
+ getClassName(): String
+ getClassVersion(): double
+ getSuperName(): IClass
+ getInterface(): Collection&lt;String&gt;
+ getExtension(): String
+ addIMethod(IMethod method): void
+ addIField(IField field): void
+ setAccessLevel(int access): void
+ setSignature(String signature): void
+ setClassName(String name): void
+ setClassVersion(double version): void
+ setSuperName(IClass name): void
+ addInterface(String inter): void
+ setExtension(String extension): void
+ addArrow(IArrow arrow): void
+ getArrows(): Collection&lt;IArrow&gt;
+ accept(IVisitor v): void
+ addPattern(IPattern pattern): void
+ getPatterns(): List&lt;IPattern&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>160</y>
      <w>448</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>myMethodVisitor
--
- currentClass: IClass
- classes: String[]
--
+ visitFieldInsn(int opcode, String owner, String name, String desc): void
+ visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf): void
+ visitFieldInsn(int opcode, String owner, String name, String desc): void
+ visitTypeInsn(int opcode, String type): void
+ visitVarInsn(int opcode, int var): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>8</x>
      <y>304</y>
      <w>512</w>
      <h>456</h>
    </coordinates>
    <panel_attributes>/MethodVisitor/
--
# api: final int
# mv: MethodVisitor
--
+ visitAnnotation(String, boolean): AnnotationVisitor
+ visitAnnotationDefault(): AnnotationVisitor
+ visitAttribute(Attribute): void
+ visitCode(): void
+ visitEnd(): void
+ visitFieldInsn(int, String, String, String): void
+ visitFrame(int, int, Object[], int, Object[]): void
+ visitIincInsn(int, int): void
+ visitInsn(int): void
+ visitInsnAnnotation(int, TypePath, String, boolean): AnnotationVisitor
+ visitIntInsn(int, int): void
+ visitInvokeDynamicInsn(String, String, Handle, Object...): void
+ visitJumpInsn(int, Label): void
+ visitLabel(Label): void
+ visitLdcInsn(Object): void
+ visitLineNumber(int, Label): void
+ visitLocalVariable(String, String, String, Label, Label, int): void
+ visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean): AnnotationVisitor
+ visitLookupSwitchInsn(Label, int[], Label[]): void
+ visitMaxs(int, int): void
+ visitMethodInsn(int, String, String, String): void
+ visitMethodInsn(int, String, String, String, boolean): void
+ visitMultiANewArrayInsn(String, int): void
+ visitParameter(String, int): void
+ visitParameterAnnotation(int, String, boolean): AnnotationVisitor
+ visitTableSwitchInsn(int, int, Label, Label...): void
+ visitTryCatchAnnotation(int, TypePath, String, boolean)
+ visitTryCatchBlock(Label, Label, Label, String): void
+ visitTypeAnnotation(int, TypePath, String, boolean): AnnotationVisitor
+ visitTypeInsn(int, String): void
+ visitVarInsn(int, int): void 
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>984</y>
      <w>520</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>ClassMethodVisitor
--
-currentClass: IClass
-classes: String[]
--
+visitMethod(int access, String name, String desc, String signature, String[] exceptions): MethodVisitor
~addAccessLevel(int access, IMethod currentMethod): void
~addReturnType(String desc, String signature, IMethod currentMethod): void
~addArguments(String desc, String signature, IMethod currentMethod): void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>896</y>
      <w>264</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>MethodContainer
--
-instantiation: boolean
-goingToClass: String
-goingFromClass: String
-goingToMethod: String
-desc: String
--
+isInstantiation(): boolean
+setInstantiation(boolean instantiation): void
+getGoingToClass(): String
+setGoingToClass(String goingToClass): void
+getGoingFromClass(): String
+setGoingFromClass(String goingFromClass): void
+getGoingToMethod(): String
+setGoingToMethod(String methodName): void
+setDesc(String desc): void
+getDesc(): String

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3400</x>
      <y>760</y>
      <w>352</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>IVisitor
&lt;&lt;interface&gt;&gt;
--
--
+ preVisit(ITraverser c): void
+ visit(ITraverser c): void
+ postVisit(ITraverser c): void
+ addVisit(VisitType visitType, Class&lt;?&gt; clazz, IVisitMethod m): void
+ removeVisit(VisitType visitType, Class&lt;?&gt; clazz): void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3824</x>
      <y>1136</y>
      <w>160</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>LookupKey
--
-visitType: VisitType
-targetType: Class&lt;?&gt;
--
+ hashCode(): int
+ equals(Object obj): boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2816</x>
      <y>1088</y>
      <w>144</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ITraverser
&lt;&lt;interface&gt;&gt;
--
--
+accept(IVisitor v): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4032</x>
      <y>1336</y>
      <w>152</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>IVisitMethod
&lt;&lt;interface&gt;&gt;
--
--
+execute(ITraverser t): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>648</y>
      <w>448</w>
      <h>368</h>
    </coordinates>
    <panel_attributes>SequenceOutputStream
--
+ String GENERATOR_NAME
- String ERROR_ITEM_NOT_FOUND
- String ERROR_EXCEPTION
- String SYSTEM_OUTPUT_FILE
- Visitor visitor
- int callDepth
- String methodName
- String className
- String parameters
- int counter
- Map&lt;String, String&gt; variables
- List&lt;String&gt; instances
- List&lt;String&gt; classList
- List&lt;String&gt; methodList
- boolean first
--
+ initializeString(String class, String method, String desc, int callDepth): void
+ write(IModel model): void
+ setUpVisitModel(): void
- getModelClass(String name, IModel m): IClass
- recursiveGenerateGraph(String class, String varName, String method, String desc, 
                                                         int depth, IModel model): void
                                                         
- recursiveMethodGenerator(IMethod m, String varName, int depth, IModel model): void
- getMethod(IClass c, List&lt;String&gt; params, String method): IMethod
- getReturnType(MethodContainer innerCall): String
- getArgs(MethodContainer innerCall): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>992</x>
      <y>376</y>
      <w>248</w>
      <h>256</h>
    </coordinates>
    <panel_attributes>UMLOutputStream
--
- IVisitor visitor
- List&lt;String&gt; hasClassNames
- Map&lt;String, IRelation&gt; useRelationList
--
- visitHasRelation(): void
- visitUsesRelation(): void
- visitInterfaceRelation(): void
- visitExtensionRelation(): void 
- setupPreVisitModel(): void
- postVisitModel(): void
- setupPreVisitModel(): void
- visitClass(): void
- postVistClass(): void
- visitField(): void
- visitMethod(): void
- trimValue(String initial, String delimiter): String
+ write(IModel model): void
- parsePointerClass(String classPath): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3392</x>
      <y>896</y>
      <w>352</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>Visitor
--
- Map&lt;LookupKey, IVisitMethod&gt; keyToMethodMap
--
+ preVisit(ITraverser c): void
+ visit(ITraverser c): void
+ postVisit(ITraverser c): void
+ addVisit(VisitType visitType, Class&lt;?&gt; clazz, IVisitMethod m): void
+ removeVisit(VisitType visitType, Class&lt;?&gt; clazz): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4096</x>
      <y>1128</y>
      <w>104</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
VisitType
--
PreVisit
Visit
PostVisit</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2336</x>
      <y>1224</y>
      <w>224</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IRelation
&lt;&lt;interface&gt;&gt;
--
--
+ drawRelation(): String
+ setFromObject(String startObject): void
+ setToObject(String endObject): void
+ getFromObject(): String
+ getToObject(): String
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4272</x>
      <y>1072</y>
      <w>144</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>IPattern
&lt;&lt;interface&gt;&gt;
--
--
+ UMLcommand(): String
+ UMLlabel(): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3544</x>
      <y>1104</y>
      <w>160</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>IInvoker
&lt;&lt;interface&gt;&gt;
--
--
+ write(IModel model): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3592</x>
      <y>592</y>
      <w>152</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>SingletonVisitor
--
- Visitor visitor
- IClass currentClass
- boolean hasSingleton
--
- setupPreVisitClass(): void
- visitField(): void
- visitMethod(): void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4288</x>
      <y>1232</y>
      <w>136</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>SingletonPattern
--
--
+ UMLcommand(): String
+ getClassName(): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2344</x>
      <y>664</y>
      <w>216</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>ExtensionRelation
--
- String start
- String end
- String details
- String ARROW
--
+ drawRelation(): String
+ setFromObject(String startObject): void
+ setToObject(String endObject): void
+ getFromObject(): String
+ getToObject(): String
+ accept(IVisitor): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2344</x>
      <y>472</y>
      <w>216</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>HasRelation
--
- String start
- String end
- String details
- String ARROW
--
+ drawRelation(): String
+ setFromObject(String startObject): void
+ setToObject(String endObject): void
+ getFromObject(): String
+ getToObject(): String
+ accept(IVisitor): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2344</x>
      <y>1024</y>
      <w>216</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>InterfaceRelation
--
- String start
- String end
- String details
- String ARROW
--
+ drawRelation(): String
+ setFromObject(String startObject): void
+ setToObject(String endObject): void
+ getFromObject(): String
+ getToObject(): String
+ accept(IVisitor): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2344</x>
      <y>848</y>
      <w>216</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>UseRelation
--
- String start
- String end
- String details
- String ARROW
--
+ drawRelation(): String
+ setFromObject(String startObject): void
+ setToObject(String endObject): void
+ getFromObject(): String
+ getToObject(): String
+ accept(IVisitor): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2552</x>
      <y>560</y>
      <w>72</w>
      <h>736</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
group=1</panel_attributes>
    <additional_attributes>10.0;900.0;70.0;900.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2552</x>
      <y>560</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=.
group=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2552</x>
      <y>720</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=.
group=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2552</x>
      <y>920</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=.
group=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2552</x>
      <y>1088</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=.
group=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2056</x>
      <y>1080</y>
      <w>24</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1448</x>
      <y>984</y>
      <w>24</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1776</x>
      <y>368</y>
      <w>24</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1528</x>
      <y>288</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
</diagram>
